openapi: 3.0.0
info:
  title: Inventory Management API
  version: 1.0.0
  description: Full CRUD for Products, Sellers, Warehouses and Categories

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
        details:
          type: string

    ####################
    # CATEGORY SCHEMAS #
    ###################
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "Electronics"

    ####################
    # PRODUCT SCHEMAS #
    ###################
    ProductCreate:
      type: object
      properties:
        name:
          type: string
          example: "Smartphone X10"
        description:
          type: string
          example: "Flagship smartphone with AI camera"
        price:
          type: number
          format: float
          minimum: 0
          example: 999.99
        category_id:
          type: integer
          example: 1
        photos:
          type: array
          items:
            type: string
            format: binary

    ProductResponse:
      allOf:
        - $ref: "#/components/schemas/ProductCreate"
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            seller:
              $ref: "#/components/schemas/SellerShort"

    ProductWarehouse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Smartphone X10"
        amount:
          type: integer
          minimum: 0
          example: 10

    ####################
    # SELLER SCHEMAS #
    ###################
    SellerShort:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    SellerFull:
      allOf:
        - $ref: "#/components/schemas/SellerShort"
        - type: object
          properties:
            contact_email:
              type: string
              format: email
            logo:
              type: string
              format: binary

    ####################
    # WAREHOUSE SCHEMAS #
    ###################
    WarehouseCreate:
      type: object
      properties:
        location:
          type: string
          example: "New York, Main St. 42"
        phone:
          type: string

    Warehouse:
      allOf:
        - $ref: "#/components/schemas/WarehouseCreate"
        - type: object
          properties:
            id:
              type: integer
              format: int64



  parameters:
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        default: 0
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: integer

  responses:
    ValidationFailed:
      description: Invalid data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalidToken:
              value:
                error: "Invalid Data"
                code: 400

    Unauthorized:
      description: Missing or invalid token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalidToken:
              value:
                error: "Invalid JWT token"
                code: 401

paths:
  # ========================
  # PRODUCTS ENDPOINTS
  # ========================
  /products:
    get:
      summary: List all products
      parameters:
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
      responses:
        200:
          description: Products list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductResponse"

    post:
      summary: Create new product
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        200:
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"

  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - $ref: "#/components/parameters/IdParam"
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"

    put:
      summary: Update product
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/IdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        200:
          description: Product updated

    delete:
      summary: Delete product
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/IdParam"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        204:
          description: Product deleted

  # ========================
  # CATEGORIES ENDPOINTS
  # ========================
  /categories:
    get:
      summary: Get category tree
      responses:
        200:
          description: Categories list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      summary: create new category
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: Category created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"

    delete:
      summary: delete category
      security:
        - bearerAuth: [ ]
      responses:
        204:
          description: Category deleted
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"

  # ========================
  # SELLERS ENDPOINTS
  # ========================
  /sellers:
    post:
      summary: Register new seller
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SellerFull"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        201:
          description: Seller registered

  /sellers/{id}:
    get:
      summary: Find Seller by ID
      parameters:
        - $ref: "#/components/parameters/IdParam"
      responses:
        200:
          description: Seller found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerFull"
    put:
      summary: Edit Seller
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/IdParam"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        200:
          description: Seller updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerFull"
    delete:
      summary: Delete seller
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/IdParam"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        204:
          description: Seller deleted

  # ========================
  # WAREHOUSES ENDPOINTS
  # ========================
  /warehouse:
    post:
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WarehouseCreate"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        201:
          description: Warehouse created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warehouse"


  /warehouses/{id}:
    get:
      summary: Get warehouse by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/IdParam"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        200:
          description: Inventory list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Warehouse"

  /warehouse/{id}/products:
    post:
      summary: get products list in warehouse
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: "#/components/parameters/IdParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
      responses:
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationFailed"
        200:
          description: Product list in warehouse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductWarehouse"
