// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package products

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Category defines model for Category.
type Category struct {
	Id   *int64  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Error   *string `json:"error,omitempty"`
}

// ProductCreate defines model for ProductCreate.
type ProductCreate struct {
	CategoriesId *[]int64              `json:"categories_id,omitempty"`
	Description  *string               `json:"description,omitempty"`
	Name         *string               `json:"name,omitempty"`
	Photos       *[]openapi_types.File `json:"photos,omitempty"`
	Price        *float32              `json:"price,omitempty"`
}

// ProductResponse defines model for ProductResponse.
type ProductResponse struct {
	CategoriesId *[]int64     `json:"categories_id,omitempty"`
	Description  *string      `json:"description,omitempty"`
	Id           *int64       `json:"id,omitempty"`
	Name         *string      `json:"name,omitempty"`
	PhotoUrls    *[]string    `json:"photo_urls,omitempty"`
	Photos       *interface{} `json:"photos"`
	Price        *float32     `json:"price,omitempty"`
	Seller       *SellerShort `json:"seller,omitempty"`
}

// ProductWarehouse defines model for ProductWarehouse.
type ProductWarehouse struct {
	Amount *int    `json:"amount,omitempty"`
	Id     *int64  `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// SellerFull defines model for SellerFull.
type SellerFull struct {
	ContactEmail *openapi_types.Email `json:"contact_email,omitempty"`
	Id           *int64               `json:"id,omitempty"`
	Logo         *openapi_types.File  `json:"logo,omitempty"`
	Name         *string              `json:"name,omitempty"`
}

// SellerShort defines model for SellerShort.
type SellerShort struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Warehouse defines model for Warehouse.
type Warehouse struct {
	Id       *int64  `json:"id,omitempty"`
	Location *string `json:"location,omitempty"`
	Phone    *string `json:"phone,omitempty"`
}

// WarehouseCreate defines model for WarehouseCreate.
type WarehouseCreate struct {
	Location *string `json:"location,omitempty"`
	Phone    *string `json:"phone,omitempty"`
}

// IdParam defines model for IdParam.
type IdParam = int64

// LimitParam defines model for LimitParam.
type LimitParam = int64

// OffsetParam defines model for OffsetParam.
type OffsetParam = int64

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorResponse

// ValidationFailed defines model for ValidationFailed.
type ValidationFailed = ErrorResponse

// GetCategoriesIdProductsParams defines parameters for GetCategoriesIdProducts.
type GetCategoriesIdProductsParams struct {
	Limit  *LimitParam  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	Limit  *LimitParam  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetWarehouseIdProductsParams defines parameters for GetWarehouseIdProducts.
type GetWarehouseIdProductsParams struct {
	Limit  *LimitParam  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostCategoriesJSONRequestBody defines body for PostCategories for application/json ContentType.
type PostCategoriesJSONRequestBody = Category

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = ProductCreate

// PutProductsIdJSONRequestBody defines body for PutProductsId for application/json ContentType.
type PutProductsIdJSONRequestBody = ProductCreate

// PostSellersJSONRequestBody defines body for PostSellers for application/json ContentType.
type PostSellersJSONRequestBody = SellerFull

// PostWarehouseJSONRequestBody defines body for PostWarehouse for application/json ContentType.
type PostWarehouseJSONRequestBody = WarehouseCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get category tree
	// (GET /categories)
	GetCategories(c *gin.Context)
	// create new category
	// (POST /categories)
	PostCategories(c *gin.Context)
	// delete category
	// (DELETE /categories/{id})
	DeleteCategoriesId(c *gin.Context, id IdParam)
	// get products by category
	// (GET /categories/{id}/products)
	GetCategoriesIdProducts(c *gin.Context, id IdParam, params GetCategoriesIdProductsParams)
	// List all products
	// (GET /products)
	GetProducts(c *gin.Context, params GetProductsParams)
	// Create new product
	// (POST /products)
	PostProducts(c *gin.Context)
	// Delete product
	// (DELETE /products/{id})
	DeleteProductsId(c *gin.Context, id IdParam)
	// Get product by ID
	// (GET /products/{id})
	GetProductsId(c *gin.Context, id IdParam)
	// Update product
	// (PUT /products/{id})
	PutProductsId(c *gin.Context, id IdParam)
	// Register new seller
	// (POST /sellers)
	PostSellers(c *gin.Context)
	// Delete seller
	// (DELETE /sellers/{id})
	DeleteSellersId(c *gin.Context, id IdParam)
	// Find Seller by ID
	// (GET /sellers/{id})
	GetSellersId(c *gin.Context, id IdParam)
	// Edit Seller
	// (PUT /sellers/{id})
	PutSellersId(c *gin.Context, id IdParam)

	// (POST /warehouse)
	PostWarehouse(c *gin.Context)
	// get products list in warehouse
	// (GET /warehouse/{id}/products)
	GetWarehouseIdProducts(c *gin.Context, id IdParam, params GetWarehouseIdProductsParams)
	// Get warehouse by ID
	// (GET /warehouses/{id})
	GetWarehousesId(c *gin.Context, id IdParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategories(c)
}

// PostCategories operation middleware
func (siw *ServerInterfaceWrapper) PostCategories(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCategories(c)
}

// DeleteCategoriesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategoriesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCategoriesId(c, id)
}

// GetCategoriesIdProducts operation middleware
func (siw *ServerInterfaceWrapper) GetCategoriesIdProducts(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoriesIdProductsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategoriesIdProducts(c, id, params)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c, params)
}

// PostProducts operation middleware
func (siw *ServerInterfaceWrapper) PostProducts(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProducts(c)
}

// DeleteProductsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductsId(c, id)
}

// GetProductsId operation middleware
func (siw *ServerInterfaceWrapper) GetProductsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductsId(c, id)
}

// PutProductsId operation middleware
func (siw *ServerInterfaceWrapper) PutProductsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProductsId(c, id)
}

// PostSellers operation middleware
func (siw *ServerInterfaceWrapper) PostSellers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSellers(c)
}

// DeleteSellersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSellersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSellersId(c, id)
}

// GetSellersId operation middleware
func (siw *ServerInterfaceWrapper) GetSellersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSellersId(c, id)
}

// PutSellersId operation middleware
func (siw *ServerInterfaceWrapper) PutSellersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSellersId(c, id)
}

// PostWarehouse operation middleware
func (siw *ServerInterfaceWrapper) PostWarehouse(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostWarehouse(c)
}

// GetWarehouseIdProducts operation middleware
func (siw *ServerInterfaceWrapper) GetWarehouseIdProducts(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWarehouseIdProductsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWarehouseIdProducts(c, id, params)
}

// GetWarehousesId operation middleware
func (siw *ServerInterfaceWrapper) GetWarehousesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWarehousesId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/categories", wrapper.GetCategories)
	router.POST(options.BaseURL+"/categories", wrapper.PostCategories)
	router.DELETE(options.BaseURL+"/categories/:id", wrapper.DeleteCategoriesId)
	router.GET(options.BaseURL+"/categories/:id/products", wrapper.GetCategoriesIdProducts)
	router.GET(options.BaseURL+"/products", wrapper.GetProducts)
	router.POST(options.BaseURL+"/products", wrapper.PostProducts)
	router.DELETE(options.BaseURL+"/products/:id", wrapper.DeleteProductsId)
	router.GET(options.BaseURL+"/products/:id", wrapper.GetProductsId)
	router.PUT(options.BaseURL+"/products/:id", wrapper.PutProductsId)
	router.POST(options.BaseURL+"/sellers", wrapper.PostSellers)
	router.DELETE(options.BaseURL+"/sellers/:id", wrapper.DeleteSellersId)
	router.GET(options.BaseURL+"/sellers/:id", wrapper.GetSellersId)
	router.PUT(options.BaseURL+"/sellers/:id", wrapper.PutSellersId)
	router.POST(options.BaseURL+"/warehouse", wrapper.PostWarehouse)
	router.GET(options.BaseURL+"/warehouse/:id/products", wrapper.GetWarehouseIdProducts)
	router.GET(options.BaseURL+"/warehouses/:id", wrapper.GetWarehousesId)
}
